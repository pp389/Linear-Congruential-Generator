#pragma once
#include <fstream>
#include <vector>

class LinearCongruentialGenerator {
private:
	int numberOfValues, maxValue, seed, modulus, increment, multiplier;

	//this std::fstreams object handles file to which the results will be saved
	std::fstream& outputFile;

	//numbers generated after running generator
	std::vector<int> generatedNumbers;

	/**
	* Generates "increment" - its a value called "c" in LCG recurrence relation.
	*/
	void generateIncrement();

	/**
	* Generates "multiplier" - its a value called "a" in LCG recurrence relation.
	*/
	void generateMultiplier();

	/**
	* Checks if the conditions for the multiplier in the theorem are met.
	* @param multiplier - multiplier to check
	* @return true if the conditions are met or false otherwise
	*/
	bool checkConditionsForMultiplier(int multiplier) const;

public:
	LinearCongruentialGenerator(int nOfValues, int maxVal, int seed, std::fstream& output) : numberOfValues(nOfValues), maxValue(maxVal), seed(seed), outputFile(output) {  }
	~LinearCongruentialGenerator() { outputFile.close(); }

	/**
	* Starts linear congruential generator and saves results of its work to std::vector container "generatedNumbers".
	*/
	virtual void generateNumbers();

	/**
	* Views the values generated by generator.
	*/
	void viewGeneratedNumbers() const;

	/**
	* Sets the new value of "numberOfValues".
	*/
	void setNumberOfValues(int nOfValues) { numberOfValues = nOfValues; }

	/**
	* Sets the new value of "maxValue".
	* @param maxVal - new maximum value
	*/
	void setMaxValue(int maxVal) { maxValue = maxVal; }

	/**
	* Returns maximum value which can be generated.
	* @return integer value "maxValue"
	*/
	int getMaxValue() { return maxValue; }

	/**
	* Sets the new value of "seed".
	* @param seed - new "seed" value
	*/
	void setSeed(int seed) { this->seed = seed; }

	/**
	* Returns number of values to generate.
	* @return integer value "numberOfValues"
	*/
	int getNumberOfValues() const { return numberOfValues; }

	/**
	* Returns std::vector container filled with genereted numbers.
	* @return std::vector container "generated numbers"
	*/
	std::vector<int> getGeneratedNumbers() const { return generatedNumbers; };

	/**
	* Saves generated numbers to output file.
	*/
	void saveGeneratedNumbersToFile() const;
};



